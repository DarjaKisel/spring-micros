services:

  discovery:
    extends:
      file: ./discovery/app.yml
      service: discovery
    networks:
      - micros-network
    restart: always
    ports:
      - 8761:8761

  config:
    extends:
      file: ./config/app.yml
      service: config
    depends_on:
      - discovery
    networks:
      - micros-network
    restart: always
    ports:
      - 8888:8888
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery:8761/eureka/

  mysql:
    image: mariadb:10.6.4-focal
    command: '--default-authentication-plugin=mysql_native_password'
    environment:
      - MYSQL_DATABASE=serviceproducer
      - MYSQL_ROOT_PASSWORD=rootpassword@321
    restart: always
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "--silent" ]
      interval: 3s
      retries: 5
      start_period: 30s
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - micros-mysql
    expose:
      - 3306

  service-producer:
    extends:
      file: ./service-producer/app.yml
      service: service-producer
    environment:
      SPRING_PROFILES_ACTIVE: docker
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery:8761/eureka/
      MYSQL_HOST: mysql
      MYSQL_DB: serviceproducer
      SPRING_KAFKA_PRODUCER_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      [ discovery, config, kafka ]
    networks:
      - micros-network
      - micros-mysql
    scale: 1
    restart: always
    ports:
      - 8082:8082

#  service-consumer:
#    extends:
#      file: ./service-consumer/app.yml
#      service: service-consumer
#    environment:
#      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery:8761/eureka/
#      SPRING_REDIS_HOST: redis
#      SPRING_REDIS_PORT: 6379
#      SPRING_REDIS_PASSWORD: Redis@321!
#      SPRING_KAFKA_CONSUMER_BOOTSTRAP_SERVERS: kafka:9092
#    depends_on:
#      [ discovery, config, service-producer ]
#    networks:
#      - micros-network
#    scale: 1
#    restart: always
#    ports:
#      - 8082


#  redis:
#    image: redis
#    command: redis-server --requirepass Redis@321!
#    ports:
#      - "16379:6379"
#    restart: always
#    networks:
#      - micros-network
#

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181
    restart: always
    networks:
      - micros-network

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 9092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - micros-network

volumes:
  mysql-data: {}
networks:
  micros-network: {}
  micros-mysql: {}